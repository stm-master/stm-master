#define RCC_BASE 0x40021000
#define GPIOA_BASE 0x40010800
#define TIM2_BASE 0x40000000
#define ADC1_BASE 0x40012400
// RCC registers
#define RCC_APB2ENR (*(volatile unsigned long *)(RCC_BASE + 0x18))
#define RCC_APB1ENR (*(volatile unsigned long *)(RCC_BASE + 0x1C))
// GPIOA registers
#define GPIOA_CRL (*(volatile unsigned long *)(GPIOA_BASE + 0x00))
#define GPIOA_ODR (*(volatile unsigned long *)(GPIOA_BASE + 0x0C))
// TIM2 registers
#define TIM2_CR1 (*(volatile unsigned long *)(TIM2_BASE + 0x00))
#define TIM2_EGR (*(volatile unsigned long *)(TIM2_BASE + 0x14))
#define TIM2_CCMR1 (*(volatile unsigned long *)(TIM2_BASE + 0x18))
#define TIM2_CCER (*(volatile unsigned long *)(TIM2_BASE + 0x20))
#define TIM2_PSC (*(volatile unsigned long *)(TIM2_BASE + 0x28))
#define TIM2_ARR (*(volatile unsigned long *)(TIM2_BASE + 0x2C))
#define TIM2_CCR2 (*(volatile unsigned long *)(TIM2_BASE + 0x38))
// ADC1 registers
#define ADC1_SR (*(volatile unsigned long *)(ADC1_BASE + 0x00))
#define ADC1_CR1 (*(volatile unsigned long *)(ADC1_BASE + 0x04))
#define ADC1_CR2 (*(volatile unsigned long *)(ADC1_BASE + 0x08))
#define ADC1_SMPR2 (*(volatile unsigned long *)(ADC1_BASE + 0x10))
#define ADC1_SQR1 (*(volatile unsigned long *)(ADC1_BASE + 0x2C))
#define ADC1_SQR3 (*(volatile unsigned long *)(ADC1_BASE + 0x34))
#define ADC1_DR (*(volatile unsigned long *)(ADC1_BASE + 0x4C))
void delay(volatile unsigned int count);
void ADC1_Init(void);
unsigned int ADC1_Read(void);
void TIM2_PWM_Init(void);
void Set_PWM_Duty(unsigned int duty);
int main(void) {
 unsigned int adc_value;
 unsigned int duty;
 ADC1_Init();
 TIM2_PWM_Init();
 while(1) {
 adc_value = ADC1_Read();
 // Map ADC value (0..4095) to PWM duty (0..TIM2_ARR)
 duty = (adc_value * TIM2_ARR) / 4095;
 Set_PWM_Duty(duty);
 delay(50000);
 }
 return 0;
}
 void delay(volatile unsigned int count) {
 while(count--) {
 ;
 }
}
// Initialize ADC1 for channel 0 (PA0) and configure GPIOA pins PA0 and PA1
void ADC1_Init(void) {
 RCC_APB2ENR |= (1 << 2); // Enable GPIOA clock
 RCC_APB2ENR |= (1 << 9); // Enable ADC1 clock
 // PA0 analog input (CNF=00 MODE=00)
 GPIOA_CRL &= ~(0xF << 0);
 // PA1 AF Push-Pull output (CNF=10 MODE=11)
 GPIOA_CRL &= ~(0xF << 4);
 GPIOA_CRL |= (0xA << 4);
 ADC1_CR2 = 0; // Reset CR2
 ADC1_CR1 = 0; // Reset CR1
 ADC1_SMPR2 |= (7 << 0); // Channel 0 sample time = 239.5 cycles (max)
 ADC1_SQR1 = 0; // 1 conversion in regular sequence
 ADC1_SQR3 = 0; // Channel 0 first in sequence
 ADC1_CR2 |= (1 << 0); // ADON = 1 (enable ADC)
 delay(1000); // Wait ADC stabilization
}
unsigned int ADC1_Read(void) {
 ADC1_SQR3 = 0; // Select channel 0
 ADC1_CR2 |= (1 << 22); // Start conversion (SWSTART)
 while(!(ADC1_SR & (1 << 1))); // Wait EOC (end of conversion)
 return ADC1_DR;
}
void TIM2_PWM_Init(void) {
 RCC_APB1ENR |= (1 << 0); // Enable TIM2 clock
 TIM2_CR1 = 0;
 TIM2_PSC = 7; // Timer clock = 8MHz/(7+1) = 1 MHz
 TIM2_ARR = 999; // PWM freq = 1 MHz / (999+1) = 1 kHz
 // PWM mode 1 on CH2, preload enable
 TIM2_CCMR1 &= ~(0xFF << 8);
 TIM2_CCMR1 |= (0x6 << 12) | (1 << 11);
 TIM2_CCER |= (1 << 4); // Enable CH2 output
 TIM2_CR1 |= (1 << 7); // ARPE enable
 TIM2_EGR |= 1; // Update registers
 TIM2_CR1 |= 1; // Enable timer
}
void Set_PWM_Duty(unsigned int duty) {
 TIM2_CCR2 = duty;
}